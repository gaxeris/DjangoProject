from django.test import TestCase

from apps.blog.models import Category, Post




class CategoryModelTest(TestCase):
    
    @classmethod
    def setUpTestData(cls) -> None:
        cls.category = Category.objects.create(
            name='Gamedev', 
            description='There are some news about gamedev in this category'
        )
        
     
    def test_str_dumper(self):
        category = self.category
        str_repr = str(category)
        
        self.assertEqual(str_repr, 'Gamedev')
        
        
    def test_name_max_length(self):
        category = self.category
        max_length = category._meta.get_field('name').max_length
        
        self.assertEqual(max_length, 50)


class PostModelTest(TestCase):
    
    @classmethod
    def setUpTestData(cls) -> None:
        cls.category = Category.objects.create(
            name='Gamedev',
            description='There are some news about gamedev in this category'
        )
        cls.category.save()
        
        cls.post = Post.objects.create(
            title='LoL',
            text='Have you seen that riot want to add Vanguard to the game?',
            category=cls.category
        )
    
    
    def test_correct_foreign_key_in_category(self):
        
        post = self.post
        category_key = post.category
        
        category_object = self.category
        
        self.assertEqual(category_key, category_object)
        self.assertEqual(category_key.name, 'Gamedev')
    
    
    def test_title_max_length(self):
        post = self.post
        max_length = post._meta.get_field('title').max_length
        
        self.assertEqual(max_length, 150)
        
        
    def test_autopopulated_slug_in_admin(self):
        post = self.post
        slug = post.slug
        
        self.assertEqual(slug, 'lol')
        
    
            
    def test_unique_slug_on_save(self):
        
        post1 = Post.objects.create(
            title='LoL',
            text='Test if slug will change if you try to save it',
            category=self.category,
            slug='lol'
        )    
        
        slug1 = post1.slug        
        existing_slug = self.post.slug

        self.assertNotEqual(slug1, existing_slug)
        
        
        
        
    def test_unique_autopopulated_slug_on_creation(self):
        
        category = self.category
        
        Post.objects.create(
            title='LoL',
            text='Another object with the same autogenerated slug but with 1 at the end',
            category=category
        )
        
        post1 = Post.objects.get(id=2)
        slug1 = post1.slug
        
        self.assertEqual(slug1, 'lol1')
        
        Post.objects.create(
            title='LoL',
            text='Yet another object with the same autogenerated slug but with 2 at the end',
            category=category
        )
        
        post2 = Post.objects.get(id=3)
        slug2 = post2.slug
        
        self.assertEqual(slug2, 'lol2')
        

        
        
    def test_recent_posts_subquery(self):
        pass